[{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume-workflow.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"plume workflow","text":"plume designed work spreadsheets, makes easy store, maintain share data co-authors. recommend using Google Sheets take advantage R interface provided googlesheets4 package. First, ’ll need create spreadsheet. plm_template() provides default template purpose. create sheet named authors columns defined plm_template(). Enter information share sheet collaborators can add . Note ’s first time use googlesheets4, ’ll need grant package permission work Google Sheets. can read googlesheets4 authentication . sheet online, use read_sheet() read R.","code":"library(googlesheets4)  gs4_create(   name = \"authors\",   sheets = plm_template() ) read_sheet(gs4_find(\"authors\"))"},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume-workflow.html","id":"plume","dir":"Articles","previous_headings":"Set up","what":"Plume","title":"plume workflow","text":"use Plume, put code directly R Markdown Quarto document shown example : modify author data, simply edit spreadsheet. author information document update automatically next time render .","code":"--- title: An awesome publication execute:   echo: false ---  ```{r} #| label: setup #| include: false  library(googlesheets4) library(plume)  tbl_authors <- read_sheet(gs4_find(\"sheet_name\"))  aut <- Plume$new(tbl_authors) aut$set_corresponding_authors(1) ```  `r aut$get_author_list(\"^a,^co\")`  ```{r} #| results: asis aut$get_affiliations() |> cat(sep = \"\\n\\n\") ```  \\*Correspondence to: `r aut$get_contact_details()`  ## Main text  Lorem ipsum...  ## Contributions  ```{r} #| results: asis aut$get_contributions() |> cat(sep = \"; \") ```"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume-workflow.html","id":"plumequarto","dir":"Articles","previous_headings":"Set up","what":"PlumeQuarto","title":"plume workflow","text":"use PlumeQuarto inject author information Quarto document, ’ll pass data separate R script. Remember run script everytime spreadsheet updated implement changes document.","code":"library(googlesheets4) library(plume)  tbl_authors <- read_sheet(gs4_find(\"sheet_name\"))  aut <- PlumeQuarto$new(tbl_authors, file = \"file.qmd\") aut$set_corresponding_authors(1) aut$to_yaml()"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Introduction to plume","text":"’ll use data sets encyclopedists encyclopedists_fr explore different functionalities package. data sets contain information four famous authors “Encyclopédie”, published France 18th century. encyclopedists_fr French translation encyclopedists used illustrate handle custom variable names. data sets documented ?encyclopedists.","code":"encyclopedists #> # A tibble: 4 × 10 #>   given_name     family_name        email  phone orcid supervision writing note  #>   <chr>          <chr>              <chr>  <chr> <chr>       <dbl>   <dbl> <chr> #> 1 Denis          Diderot            dider… +1234 0000…           1       1 born… #> 2 Jean-Jacques   Rousseau           rouss… NA    0000…          NA       1 NA    #> 3 François-Marie Arouet             aroue… NA    NA             NA       1 also… #> 4 Jean           Le Rond d'Alembert alemb… NA    0000…           1       1 born… #> # ℹ 2 more variables: affiliation_1 <chr>, affiliation_2 <chr>"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"creating-a-plume-object","dir":"Articles","previous_headings":"","what":"Creating a plume object","title":"Introduction to plume","text":"plume provides two R6 classes, namely Plume PlumeQuarto. create plume object, simply write name class want use followed new() method. plume classes take data frame tibble input data. input data must least two columns, one given names another family names.","code":"Plume$new(encyclopedists) #> # A tibble: 4 × 11 #>      id given_name     family_name literal_name initials orcid email phone note  #>   <int> <chr>          <chr>       <chr>        <chr>    <chr> <chr> <chr> <chr> #> 1     1 Denis          Diderot     Denis Dider… DD       0000… dide… +1234 born… #> 2     2 Jean-Jacques   Rousseau    Jean-Jacque… J-JR     0000… rous… NA    NA    #> 3     3 François-Marie Arouet      François-Ma… F-MA     NA    arou… NA    also… #> 4     4 Jean           Le Rond d'… Jean Le Ron… JLRd'A   0000… alem… NA    born… #> # ℹ 2 more variables: affiliation <list>, role <list>"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"available-names","dir":"Articles","previous_headings":"","what":"Available names","title":"Introduction to plume","text":"default variables handled plume classes organised six categories: Primaries: variables required create plume object. Secondaries: optional variables can provided input data. Nestables: optional variables can provided input data pass multiple independent values authors. Nestable variables must start prefix. E.g. affiliation_1, affiliation_2, …, affiliation_n pass several affiliations authors.  Constants: optional names can provided input data. names standardised must provided . Internals: variables created internally. variables don’t need provided input data ignored supplied. shouldn’t worry much variables unless want customise names extend plume classes new default names. Meta: PlumeQuarto-specific variables used pass extra information doesn’t fit categories. Meta columns must start prefix meta- followed custom name (e.g. meta-custom_name). use variables pass data template specific. See Quarto’s arbitrary-metadata section details.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"using-custom-names","dir":"Articles","previous_headings":"","what":"Using custom names","title":"Introduction to plume","text":"plume lets use custom variable names. Simply provide names parameter named vector instantiating plume class, keys default names values respective replacements.","code":"Plume$new(   encyclopedists_fr,   names = c(     given_name = \"prénom\",     family_name = \"nom\",     literal_name = \"nom_complet\",     email = \"courriel\",     initials = \"initiales\"   ) ) #> # A tibble: 4 × 10 #>      id prénom         nom      nom_complet initiales orcid courriel role  note  #>   <int> <chr>          <chr>    <chr>       <chr>     <chr> <chr>    <chr> <chr> #> 1     1 Denis          Diderot  Denis Dide… DD        0000… diderot… Supe… né e… #> 2     2 Jean-Jacques   Rousseau Jean-Jacqu… J-JR      0000… roussea… NA    NA    #> 3     3 François-Marie Arouet   François-M… F-MA      NA    arouet@… NA    dit … #> 4     4 Jean           Le Rond… Jean Le Ro… JLRd'A    0000… alember… Supe… né e… #> # ℹ 1 more variable: affiliation <list>"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"defining-roles-and-contributors","dir":"Articles","previous_headings":"","what":"Defining roles and contributors","title":"Introduction to plume","text":"can add roles creating specific role columns input data indicate contributors using 1: plume uses Contributor Roles Taxonomy (CRediT) default (assuming input data contains appropriate columns). can specify roles via roles parameter creating plume object. roles parameter takes vector key-value pairs keys identify role columns values define actual roles use.","code":"#> # A tibble: 4 × 4 #>   given_name     family_name        supervision writing #>   <chr>          <chr>                    <dbl>   <dbl> #> 1 Denis          Diderot                      1       1 #> 2 Jean-Jacques   Rousseau                    NA       1 #> 3 François-Marie Arouet                      NA       1 #> 4 Jean           Le Rond d'Alembert           1       1 Plume$new(data, roles = c(   supervision = \"supervised the project\",   writing = \"contributed to the writing\" ))"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"assigning-status-to-authors","dir":"Articles","previous_headings":"","what":"Assigning status to authors","title":"Introduction to plume","text":"plume provides 4 methods set particular status authors: default, set_*() methods assign values authors’ id. can change behaviour object method level using /.parameters. Note methods case insensitive. Use everyone() assign TRUE authors:","code":"aut <- Plume$new(dplyr::select(encyclopedists, given_name, family_name))  aut$set_corresponding_authors(dd, \"j-jr\", .by = \"initials\") aut #> # A tibble: 4 × 6 #>      id given_name     family_name        literal_name    initials corresponding #>   <int> <chr>          <chr>              <chr>           <chr>    <lgl>         #> 1     1 Denis          Diderot            Denis Diderot   DD       TRUE          #> 2     2 Jean-Jacques   Rousseau           Jean-Jacques R… J-JR     TRUE          #> 3     3 François-Marie Arouet             François-Marie… F-MA     FALSE         #> 4     4 Jean           Le Rond d'Alembert Jean Le Rond d… JLRd'A   FALSE aut$set_corresponding_authors(everyone()) aut #> # A tibble: 4 × 6 #>      id given_name     family_name        literal_name    initials corresponding #>   <int> <chr>          <chr>              <chr>           <chr>    <lgl>         #> 1     1 Denis          Diderot            Denis Diderot   DD       TRUE          #> 2     2 Jean-Jacques   Rousseau           Jean-Jacques R… J-JR     TRUE          #> 3     3 François-Marie Arouet             François-Marie… F-MA     TRUE          #> 4     4 Jean           Le Rond d'Alembert Jean Le Rond d… JLRd'A   TRUE"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"pushing-data-into-a-yaml-or-quarto-file","dir":"Articles","previous_headings":"","what":"Pushing data into a YAML or Quarto file","title":"Introduction to plume","text":"PlumeQuarto allows inject author metadata directly YAML files YAML header .qmd files. Consider following Quarto document: can push information input data YAML Quarto file using to_yaml() method: Authors listed order ’re defined input data. YAML Quarto file already author affiliations keys, to_yaml() replaces old values new ones.","code":"--- title: Encyclopédie ---  Qui scribit bis legit aut <- PlumeQuarto$new(   dplyr::slice(encyclopedists, 1, 4),   file = \"file.qmd\" ) aut$to_yaml() --- title: Encyclopédie author:   - id: aut1     name:       given: Denis       family: Diderot     email: diderot@encyclopediste.fr     phone: '+1234'     orcid: 0000-0000-0000-0001     note: born in 1713 in Langres     roles:       - Supervision       - Writing - original draft     affiliations:       - ref: aff1   - id: aut2     name:       given: Jean       family: Le Rond d'Alembert     email: alembert@encyclopediste.fr     orcid: 0000-0000-0000-0003     note: born in 1717 in Paris     roles:       - Supervision       - Writing - original draft     affiliations:       - ref: aff1       - ref: aff2 affiliations:   - id: aff1     name: Université de Paris   - id: aff2     name: Collège des Quatre-Nations ---  Qui scribit bis legit aut <- PlumeQuarto$new(   dplyr::slice(encyclopedists, 2),   file = \"file.qmd\" ) aut$to_yaml() --- title: Encyclopédie author:   - name:       given: Jean-Jacques       family: Rousseau     email: rousseau@encyclopediste.fr     orcid: 0000-0000-0000-0002     roles:       - Writing - original draft     affiliations:       - ref: aff1 affiliations:   - id: aff1     name: Lycée Louis-le-Grand ---  Qui scribit bis legit"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"getting-author-information","dir":"Articles","previous_headings":"","what":"Getting author information","title":"Introduction to plume","text":"get_*() methods (available Plume class) format author information character vectors. useful want output author data document without using journal templates.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"author-lists","dir":"Articles","previous_headings":"Getting author information","what":"Author lists","title":"Introduction to plume","text":"get_author_list() generates author lists. can control formatting author suffixes (symbols linking authors affiliations, notes metadata) using suffix parameter. suffix takes character string argument allows choose symbol categories suffix authors , using following keys: affiliations c corresponding authors n notes o ORCIDs order keys determines order symbol categories. addition, can use ^ superscript , separate symbols: Use suffix = NULL suffix = \"\" ignore suffixes:","code":"aut <- Plume$new(encyclopedists) aut$set_corresponding_authors(everyone())  aut$get_author_list(suffix = \"ac\") #> Denis Diderot1\\* #> Jean-Jacques Rousseau2\\* #> François-Marie Arouet2\\* #> Jean Le Rond d'Alembert1,3\\*  aut$get_author_list(suffix = \"ca\") #> Denis Diderot\\*1 #> Jean-Jacques Rousseau\\*2 #> François-Marie Arouet\\*2 #> Jean Le Rond d'Alembert\\*1,3 aut$set_corresponding_authors(1, 4)  aut$get_author_list(\"^a,^cn\") #> Denis Diderot^1,^\\*† #> Jean-Jacques Rousseau^2^ #> François-Marie Arouet^2^‡ #> Jean Le Rond d'Alembert^1,3,^\\*§ aut$get_author_list(suffix = NULL) #> Denis Diderot #> Jean-Jacques Rousseau #> François-Marie Arouet #> Jean Le Rond d'Alembert"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"affiliations-notes","dir":"Articles","previous_headings":"Getting author information","what":"Affiliations & notes","title":"Introduction to plume","text":"get_affiliations() get_notes() return authors’ affiliations notes.","code":"aut$get_affiliations() #> ^1^Université de Paris #> ^2^Lycée Louis-le-Grand #> ^3^Collège des Quatre-Nations  aut$get_notes(sep = \": \", superscript = FALSE) #> †: born in 1713 in Langres #> ‡: also known as Voltaire #> §: born in 1717 in Paris"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"orcids","dir":"Articles","previous_headings":"Getting author information","what":"ORCIDs","title":"Introduction to plume","text":"get_orcids() returns authors respective ORCID.","code":"aut$get_orcids(icon = FALSE, sep = \" \") #> Denis Diderot <https://orcid.org/0000-0000-0000-0001> #> Jean-Jacques Rousseau <https://orcid.org/0000-0000-0000-0002> #> Jean Le Rond d'Alembert <https://orcid.org/0000-0000-0000-0003>"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"contact-details","dir":"Articles","previous_headings":"Getting author information","what":"Contact details","title":"Introduction to plume","text":"can get contact details corresponding authors using get_contact_details() method:","code":"aut$get_contact_details() #> diderot@encyclopediste.fr (Denis Diderot) #> alembert@encyclopediste.fr (Jean Le Rond d'Alembert)  aut$get_contact_details(phone = TRUE) #> diderot@encyclopediste.fr, +1234 (Denis Diderot) #> alembert@encyclopediste.fr (Jean Le Rond d'Alembert)  aut$get_contact_details(format = \"{name}: {details}\") #> Denis Diderot: diderot@encyclopediste.fr #> Jean Le Rond d'Alembert: alembert@encyclopediste.fr"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"contributions","dir":"Articles","previous_headings":"Getting author information","what":"Contributions","title":"Introduction to plume","text":"plume provides convenient way generate contribution lists using get_contributions() method. default, get_contributions() lists contributors order ’re defined. can arrange contributors alphabetical order alphabetical_order = TRUE: ’s possible force one contributors appear first given role setting main contributors: can assign main contributors across multiple roles using .roles parameter. E.g. set main contributor across roles: Note main contributors priority alphabetical ordering: .roles parameter applies unnamed expressions. allows set main contributors across specific roles . , authors 4 3 main contributors roles supervision, author 1 main contributor.","code":"aut$get_contributions() #> Supervision: D.D. and J.L.R.d'A. #> Writing - original draft: D.D., J.-J.R., F.-M.A. and J.L.R.d'A.  aut$get_contributions(   roles_first = FALSE,   by_author = TRUE,   literal_names = TRUE ) #> Denis Diderot: Supervision and Writing - original draft #> Jean-Jacques Rousseau: Writing - original draft #> François-Marie Arouet: Writing - original draft #> Jean Le Rond d'Alembert: Supervision and Writing - original draft  aut2 <- Plume$new(encyclopedists, roles = c(   supervision = \"supervised the project\",   writing = \"contributed to the Encyclopédie\" )) aut2$get_contributions(roles_first = FALSE, divider = \" \") #> D.D. and J.L.R.d'A. supervised the project #> D.D., J.-J.R., F.-M.A. and J.L.R.d'A. contributed to the Encyclopédie aut$get_contributions(alphabetical_order = TRUE) #> Supervision: D.D. and J.L.R.d'A. #> Writing - original draft: D.D., F.-M.A., J.-J.R. and J.L.R.d'A. aut$set_main_contributors(supervision = 4, writing = c(3, 2)) aut$get_contributions() #> Supervision: J.L.R.d'A. and D.D. #> Writing - original draft: F.-M.A., J.-J.R., D.D. and J.L.R.d'A. aut$set_main_contributors(jean, .roles = aut$get_roles(), .by = \"given_name\") aut$get_contributions() #> Supervision: J.L.R.d'A. and D.D. #> Writing - original draft: J.L.R.d'A., D.D., J.-J.R. and F.-M.A. aut$get_contributions(alphabetical_order = TRUE) #> Supervision: J.L.R.d'A. and D.D. #> Writing - original draft: J.L.R.d'A., D.D., F.-M.A. and J.-J.R. aut$set_main_contributors(4, 3, supervision = 1, .roles = aut$get_roles())"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"symbols","dir":"Articles","previous_headings":"","what":"Symbols","title":"Introduction to plume","text":"Default symbols : can change symbols creating plume object using parameter symbols. Use NULL display numbers: Use NULL much possible symbols using numerous unique items (typically affiliations). use letters given category unique items letters, can control sequencing behaviour using sequential() modifier, shown : default, plume repeats elements elements vector consumed. Using sequential() allows display logical sequence characters (e.g. , b, c, ..., z, aa, ab, ac, ..., az, ba, bb, bc, ...).","code":"#> List of 3 #>  $ affiliation  : NULL #>  $ corresponding: chr \"\\\\*\" #>  $ note         : chr [1:6] \"†\" \"‡\" \"§\" \"¶\" \"#\" \"\\\\*\\\\*\" aut <- Plume$new(   encyclopedists,   symbols = list(affiliation = letters, note = NULL) )  aut$get_author_list(\"^a,n^\") #> Denis Diderot^a,1^ #> Jean-Jacques Rousseau^b^ #> François-Marie Arouet^b,2^ #> Jean Le Rond d'Alembert^a,c,3^ Plume$new(   encyclopedists,   symbols = list(affiliation = sequential(letters)) )"},{"path":"https://arnaudgallou.github.io/plume/dev/articles/plume.html","id":"outputting-as-markdown-content","dir":"Articles","previous_headings":"","what":"Outputting as markdown content","title":"Introduction to plume","text":"output author data markdown content, use chunk option results: asis combination cat(): Inline chunks output values “” default can used follows: `r aut$get_author_list()`","code":"```{r} #| results: asis aut$get_contributions() |> cat(sep = \"; \") ```"},{"path":"https://arnaudgallou.github.io/plume/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arnaud Gallou. Author, maintainer, copyright holder.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gallou (2025). plume: Simple Author Handler Scientific Writing. R package version 0.2.5.9000, https://github.com/arnaudgallou/plume, https://arnaudgallou.github.io/plume/.","code":"@Manual{,   title = {plume: A Simple Author Handler for Scientific Writing},   author = {Arnaud Gallou},   year = {2025},   note = {R package version 0.2.5.9000,     https://github.com/arnaudgallou/plume},   url = {https://arnaudgallou.github.io/plume/}, }"},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Simple Author Handler for Scientific Writing","text":"plume provides tools handling generating author-related information scientific writing R Markdown Quarto. package implements two R6 classes: PlumeQuarto: class allows push author metadata YAML files YAML header Quarto files. generated YAML complies Quarto’s author affiliations schemas. class use work journal templates. Plume: class generates author lists author-related information character strings. easy convenient solution don’t need preformatted documents.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Simple Author Handler for Scientific Writing","text":"Install plume CRAN : Alternatively, can install development version plume GitHub :","code":"install.packages(\"plume\") # install.packages(\"pak\") pak::pak(\"arnaudgallou/plume\")"},{"path":"https://arnaudgallou.github.io/plume/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Simple Author Handler for Scientific Writing","text":"minimal required data work plume classes data set containing given family names normally want provide information email addresses, ORCIDs, affiliations, etc. PlumeQuarto lets push author metadata YAML files YAML header .qmd file using to_yaml() method. Consider following example: Alternatively, can generate author information character strings using Plume:","code":"library(plume)  encyclopedists #> # A tibble: 4 × 10 #>   given_name     family_name        email  phone orcid supervision writing note  #>   <chr>          <chr>              <chr>  <chr> <chr>       <dbl>   <dbl> <chr> #> 1 Denis          Diderot            dider… +1234 0000…           1       1 born… #> 2 Jean-Jacques   Rousseau           rouss… <NA>  0000…          NA       1 <NA>  #> 3 François-Marie Arouet             aroue… <NA>  <NA>           NA       1 also… #> 4 Jean           Le Rond d'Alembert alemb… <NA>  0000…           1       1 born… #> # ℹ 2 more variables: affiliation_1 <chr>, affiliation_2 <chr>  Plume$new(encyclopedists) #> # A tibble: 4 × 11 #>      id given_name     family_name literal_name initials email phone orcid note  #>   <int> <chr>          <chr>       <chr>        <chr>    <chr> <chr> <chr> <chr> #> 1     1 Denis          Diderot     Denis Dider… DD       dide… +1234 0000… born… #> 2     2 Jean-Jacques   Rousseau    Jean-Jacque… J-JR     rous… <NA>  0000… <NA>  #> 3     3 François-Marie Arouet      François-Ma… F-MA     arou… <NA>  <NA>  also… #> 4     4 Jean           Le Rond d'… Jean Le Ron… JLRd'A   alem… <NA>  0000… born… #> # ℹ 2 more variables: affiliation <list>, role <list> --- title: Encyclopédie ---  Qui scribit bis legit aut <- PlumeQuarto$new(   encyclopedists,   file = \"file.qmd\" ) aut$set_corresponding_authors(1, 4) aut$to_yaml() --- title: Encyclopédie author:   - id: aut1     name:       given: Denis       family: Diderot     email: diderot@encyclopediste.fr     phone: '+1234'     orcid: 0000-0000-0000-0001     note: born in 1713 in Langres     attributes:       corresponding: true     roles:       - Supervision       - Writing - original draft     affiliations:       - ref: aff1   - id: aut2     name:       given: Jean-Jacques       family: Rousseau     email: rousseau@encyclopediste.fr     orcid: 0000-0000-0000-0002     attributes:       corresponding: false     roles:       - Writing - original draft     affiliations:       - ref: aff2   - id: aut3     name:       given: François-Marie       family: Arouet     email: arouet@encyclopediste.fr     note: also known as Voltaire     attributes:       corresponding: false     roles:       - Writing - original draft     affiliations:       - ref: aff2   - id: aut4     name:       given: Jean       family: Le Rond d'Alembert     email: alembert@encyclopediste.fr     orcid: 0000-0000-0000-0003     note: born in 1717 in Paris     attributes:       corresponding: true     roles:       - Supervision       - Writing - original draft     affiliations:       - ref: aff1       - ref: aff3 affiliations:   - id: aff1     name: Université de Paris   - id: aff2     name: Lycée Louis-le-Grand   - id: aff3     name: Collège des Quatre-Nations ---  Qui scribit bis legit aut <- Plume$new(encyclopedists) aut$set_corresponding_authors(diderot, .by = \"family_name\")  aut$get_author_list(suffix = \"^a,^cn\") #> Denis Diderot^1,^\\*† #> Jean-Jacques Rousseau^2^ #> François-Marie Arouet^2^‡ #> Jean Le Rond d'Alembert^1,3^§  aut$get_contact_details() #> diderot@encyclopediste.fr (Denis Diderot)  aut$get_affiliations() #> ^1^Université de Paris #> ^2^Lycée Louis-le-Grand #> ^3^Collège des Quatre-Nations  aut$get_notes() #> ^†^born in 1713 in Langres #> ^‡^also known as Voltaire #> ^§^born in 1717 in Paris  aut$get_contributions() #> Supervision: D.D. and J.L.R.d'A. #> Writing - original draft: D.D., J.-J.R., F.-M.A. and J.L.R.d'A.  aut2 <- Plume$new(   encyclopedists,   roles = c(     supervision = \"supervised the project\",     writing = \"contributed to the Encyclopédie\"   ),   symbols = list(affiliation = letters) )  aut2$get_author_list(\"^a^\") #> Denis Diderot^a^ #> Jean-Jacques Rousseau^b^ #> François-Marie Arouet^b^ #> Jean Le Rond d'Alembert^a,c^  aut2$get_contributions(roles_first = FALSE, divider = \" \") #> D.D. and J.L.R.d'A. supervised the project #> D.D., J.-J.R., F.-M.A. and J.L.R.d'A. contributed to the Encyclopédie"},{"path":"https://arnaudgallou.github.io/plume/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"A Simple Author Handler for Scientific Writing","text":"Thanks : Richard J. Telford advice helped conceive package. Maëlle Salmon Gábor Csárdi help stuck unit tests, roxygen2 pkgdown.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":null,"dir":"Reference","previous_headings":"","what":"Plume class — Plume","title":"Plume class — Plume","text":"Class generates author lists author-related information character strings.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Plume class — Plume","text":"plume::NameHandler -> plume::PlumeHandler -> plume::StatusSetter -> plume::StatusSetterPlume -> Plume","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Plume class — Plume","text":"plume::PlumeHandler$get_plume() plume::PlumeHandler$get_roles() plume::PlumeHandler$print() plume::StatusSetter$set_corresponding_authors() plume::StatusSetterPlume$set_main_contributors()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Plume class — Plume","text":"Plume$new() Plume$get_author_list() Plume$get_affiliations() Plume$get_notes() Plume$get_orcids() Plume$get_contact_details() Plume$get_contributions() Plume$clone()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Plume class — Plume","text":"Create Plume object.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$new(   data,   names = NULL,   symbols = NULL,   roles = credit_roles(),   credit_roles = FALSE,   initials_given_name = FALSE,   family_name_first = FALSE,   interword_spacing = TRUE,   orcid_icon = orcid(),   by = NULL )"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"data data frame containing author-related data. names vector key-value pairs specifying custom names use, keys default names values respective replacements. symbols list key-value pairs defining symbols use link authors metadata. Valid keys \"affiliation\", \"corresponding\" \"note\". default, uses digits affiliations, \"*\" corresponding authors \"†\", \"‡\", \"§\", \"¶\", \"#\", \"**\" notes. Set key NULL use numerals. roles vector key-value pairs defining roles keys identify role columns values describe actual roles use. credit_roles  now recommended use roles = credit_roles() use Contributor Roles Taxonomy. initials_given_name initials given names used? family_name_first literal names show family names first? interword_spacing literal names use spacing? parameter useful people writing languages separate words space Chinese Japanese. orcid_icon ORCID icon, defined orcid(), used. character string defining default variable used assign specific metadata authors set_*() methods. default, uses authors' id.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"Plume object.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-author-list-","dir":"Reference","previous_headings":"","what":"Method get_author_list()","title":"Plume class — Plume","text":"Get author list.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_author_list(suffix = NULL, format = deprecated())"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"suffix character string defining format symbols suffixing author names. See details. format  Please use parameter suffix instead.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plume class — Plume","text":"suffix lets choose symbol categories suffix authors , using following keys: affiliations c corresponding authors n notes o ORCIDs order keys determines order symbol types. E.g. \"ac\" shows affiliation ids first corresponding author mark second, \"ca\" shows corresponding author mark first affiliation ids second. Use \",\" separate \"^\" superscript symbols. Use NULL empty string list author names without suffixes.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-affiliations-","dir":"Reference","previous_headings":"","what":"Method get_affiliations()","title":"Plume class — Plume","text":"Get authors' affiliations.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_affiliations(superscript = TRUE, sep = \"\")"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"superscript affiliation ids superscripted? sep Separator used separate affiliation ids affiliations.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-notes-","dir":"Reference","previous_headings":"","what":"Method get_notes()","title":"Plume class — Plume","text":"Get authors' notes.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_notes(superscript = TRUE, sep = \"\")"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"superscript note ids superscripted? sep Separator used separate note ids notes.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-orcids-","dir":"Reference","previous_headings":"","what":"Method get_orcids()","title":"Plume class — Plume","text":"Get authors' ORCID.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_orcids(compact = FALSE, icon = TRUE, sep = \"\")"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"compact links display 16-digit identifier? icon ORCID icon shown? sep Separator used separate authors respective ORCID.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-contact-details-","dir":"Reference","previous_headings":"","what":"Method get_contact_details()","title":"Plume class — Plume","text":"Get contact details corresponding authors.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_contact_details(   format = \"{details} ({name})\",   email = TRUE,   phone = FALSE,   fax = FALSE,   url = FALSE,   sep = \", \" )"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"format glue specification uses variables name /details. email, phone, fax, url Arguments equal TRUE evaluated passed variable details. default, email set TRUE. sep Separator used separate details items.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-get-contributions-","dir":"Reference","previous_headings":"","what":"Method get_contributions()","title":"Plume class — Plume","text":"Get authors' contributions.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$get_contributions(   roles_first = TRUE,   by_author = FALSE,   alphabetical_order = FALSE,   dotted_initials = TRUE,   literal_names = FALSE,   divider = \": \",   sep = \", \",   sep_last = \" and \" )"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"roles_first TRUE, displays roles first authors second. FALSE, roles follow authors. by_author roles grouped author? alphabetical_order authors listed alphabetical order? default, lists authors order defined data. dotted_initials initials dot-separated? literal_names literal names used? divider Separator used separate roles authors. sep Separator used separate roles authors. sep_last Separator used separate last two roles authors one item associated role author.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Plume class — Plume","text":"character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Plume class — Plume","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Plume class — Plume","text":"","code":"Plume$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plume class — Plume","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/Plume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plume class — Plume","text":"","code":"# Create a Plume instance aut <- Plume$new(encyclopedists)  # Set the desired corresponding authors, using # authors' id by default aut$set_corresponding_authors(1, 4)  # Getting authors suffixed by affiliation ids # and the corresponding author mark: aut$get_author_list(\"^a,c^\") #> Denis Diderot^1,\\*^ #> Jean-Jacques Rousseau^2^ #> François-Marie Arouet^2^ #> Jean Le Rond d'Alembert^1,3,\\*^  # Or maybe with the corresponding author mark # coming before affiliation ids: aut$get_author_list(\"^c,a^\") #> Denis Diderot^\\*,1^ #> Jean-Jacques Rousseau^2^ #> François-Marie Arouet^2^ #> Jean Le Rond d'Alembert^\\*,1,3^  # Getting more author metadata aut$get_affiliations() #> ^1^Université de Paris #> ^2^Lycée Louis-le-Grand #> ^3^Collège des Quatre-Nations  aut$get_contributions() #> Supervision: D.D. and J.L.R.d'A. #> Writing - original draft: D.D., J.-J.R., F.-M.A. and J.L.R.d'A.  # Use `symbols` to change the default symbols. # E.g. to use letters as affiliation ids: aut <- Plume$new(   encyclopedists,   symbols = list(affiliation = letters) )  aut$get_author_list(\"^a^\") #> Denis Diderot^a^ #> Jean-Jacques Rousseau^b^ #> François-Marie Arouet^b^ #> Jean Le Rond d'Alembert^a,c^  aut$get_affiliations() #> ^a^Université de Paris #> ^b^Lycée Louis-le-Grand #> ^c^Collège des Quatre-Nations  # It is also possible to output contributions in the # active voice aut <- Plume$new(encyclopedists, roles = c(   supervision = \"supervised the project\",   writing = \"contributed to the Encyclopédie\" )) aut$get_contributions(roles_first = FALSE, divider = \" \") #> D.D. and J.L.R.d'A. supervised the project #> D.D., J.-J.R., F.-M.A. and J.L.R.d'A. contributed to the Encyclopédie"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"PlumeHandler class — PlumeHandler","title":"PlumeHandler class — PlumeHandler","text":"Internal class processing shaping tabular data plume object.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"PlumeHandler class — PlumeHandler","text":"plume::NameHandler -> PlumeHandler","code":""},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlumeHandler class — PlumeHandler","text":"PlumeHandler$new() PlumeHandler$print() PlumeHandler$get_plume() PlumeHandler$get_roles() PlumeHandler$clone()","code":""},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeHandler class — PlumeHandler","text":"","code":"PlumeHandler$new(   data,   names,   roles,   credit_roles,   initials_given_name,   family_name_first = FALSE,   interword_spacing = TRUE )"},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeHandler class — PlumeHandler","text":"","code":"PlumeHandler$print()"},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeHandler class — PlumeHandler","text":"","code":"PlumeHandler$get_plume()"},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeHandler class — PlumeHandler","text":"","code":"PlumeHandler$get_roles()"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlumeHandler class — PlumeHandler","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeHandler class — PlumeHandler","text":"","code":"PlumeHandler$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlumeHandler class — PlumeHandler","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":null,"dir":"Reference","previous_headings":"","what":"PlumeQuarto class — PlumeQuarto","title":"PlumeQuarto class — PlumeQuarto","text":"Class pushes author metadata YAML files YAML header Quarto files.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PlumeQuarto class — PlumeQuarto","text":"plume::NameHandler -> plume::PlumeHandler -> plume::StatusSetter -> plume::StatusSetterPlumeQuarto -> PlumeQuarto","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PlumeQuarto class — PlumeQuarto","text":"plume::PlumeHandler$get_plume() plume::PlumeHandler$get_roles() plume::PlumeHandler$print() plume::StatusSetter$set_corresponding_authors() plume::StatusSetterPlumeQuarto$set_cofirst_authors() plume::StatusSetterPlumeQuarto$set_deceased() plume::StatusSetterPlumeQuarto$set_equal_contributor()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlumeQuarto class — PlumeQuarto","text":"PlumeQuarto$new() PlumeQuarto$to_yaml() PlumeQuarto$clone()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PlumeQuarto class — PlumeQuarto","text":"Create PlumeQuarto object.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeQuarto class — PlumeQuarto","text":"","code":"PlumeQuarto$new(   data,   file,   names = NULL,   roles = credit_roles(),   credit_roles = FALSE,   initials_given_name = FALSE,   by = NULL )"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlumeQuarto class — PlumeQuarto","text":"data data frame containing author-related data. file .qmd, .yml .yaml file insert author data . names vector key-value pairs specifying custom names use, keys default names values respective replacements. roles vector key-value pairs defining roles keys identify columns values describe actual roles use. credit_roles  now recommended use roles = credit_roles() use Contributor Roles Taxonomy. initials_given_name initials given names used? character string defining default variable used assign specific metadata authors set_*() methods. default, uses authors' id.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"PlumeQuarto class — PlumeQuarto","text":"PlumeQuarto object.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"method-to-yaml-","dir":"Reference","previous_headings":"","what":"Method to_yaml()","title":"PlumeQuarto class — PlumeQuarto","text":"Push update author information YAML file YAML header. generated YAML complies Quarto's author affiliations schemas.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeQuarto class — PlumeQuarto","text":"","code":"PlumeQuarto$to_yaml()"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PlumeQuarto class — PlumeQuarto","text":"missing, to_yaml() inserts author information desired file. Otherwise, function replaces old author affiliations values ones provided input data.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"PlumeQuarto class — PlumeQuarto","text":"input file invisibly.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlumeQuarto class — PlumeQuarto","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PlumeQuarto class — PlumeQuarto","text":"","code":"PlumeQuarto$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlumeQuarto class — PlumeQuarto","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/PlumeQuarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlumeQuarto class — PlumeQuarto","text":"","code":"# Create a simple temporary file with a YAML header # containing a title tmp_file <- tempfile(fileext = \".qmd\") readr::write_lines(\"---\\ntitle: Encyclopédie\\n---\", tmp_file)  # View the temporary file cat(readr::read_file(tmp_file)) #> --- #> title: Encyclopédie #> ---  # Create a PlumeQuarto instance using the temporary file # you've just created aut <- PlumeQuarto$new(   encyclopedists,   file = tmp_file )  # And push author data to the YAML header aut$to_yaml()  cat(readr::read_file(tmp_file)) #> --- #> title: Encyclopédie #> author: #>   - id: aut1 #>     name: #>       given: Denis #>       family: Diderot #>     email: diderot@encyclopediste.fr #>     phone: '+1234' #>     orcid: 0000-0000-0000-0001 #>     note: born in 1713 in Langres #>     roles: #>       - Supervision #>       - Writing - original draft #>     affiliations: #>       - ref: aff1 #>   - id: aut2 #>     name: #>       given: Jean-Jacques #>       family: Rousseau #>     email: rousseau@encyclopediste.fr #>     orcid: 0000-0000-0000-0002 #>     roles: #>       - Writing - original draft #>     affiliations: #>       - ref: aff2 #>   - id: aut3 #>     name: #>       given: François-Marie #>       family: Arouet #>     email: arouet@encyclopediste.fr #>     note: also known as Voltaire #>     roles: #>       - Writing - original draft #>     affiliations: #>       - ref: aff2 #>   - id: aut4 #>     name: #>       given: Jean #>       family: Le Rond d'Alembert #>     email: alembert@encyclopediste.fr #>     orcid: 0000-0000-0000-0003 #>     note: born in 1717 in Paris #>     roles: #>       - Supervision #>       - Writing - original draft #>     affiliations: #>       - ref: aff1 #>       - ref: aff3 #> affiliations: #>   - id: aff1 #>     name: Université de Paris #>   - id: aff2 #>     name: Lycée Louis-le-Grand #>   - id: aff3 #>     name: Collège des Quatre-Nations #> ---  # Pushing again with new data updates the YAML # header accordingly aut <- PlumeQuarto$new(   dplyr::slice(encyclopedists, 2),   file = tmp_file ) aut$to_yaml()  cat(readr::read_file(tmp_file)) #> --- #> title: Encyclopédie #> author: #>   - name: #>       given: Jean-Jacques #>       family: Rousseau #>     email: rousseau@encyclopediste.fr #>     orcid: 0000-0000-0000-0002 #>     roles: #>       - Writing - original draft #>     affiliations: #>       - ref: aff1 #> affiliations: #>   - id: aff1 #>     name: Lycée Louis-le-Grand #> ---  # Clean up the temporary file unlink(tmp_file)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":null,"dir":"Reference","previous_headings":"","what":"StatusSetter class — StatusSetter","title":"StatusSetter class — StatusSetter","text":"Internal class manages authors' status.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"StatusSetter class — StatusSetter","text":"plume::NameHandler -> plume::PlumeHandler -> StatusSetter","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"StatusSetter class — StatusSetter","text":"plume::PlumeHandler$get_plume() plume::PlumeHandler$get_roles() plume::PlumeHandler$print()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StatusSetter class — StatusSetter","text":"StatusSetter$new() StatusSetter$set_corresponding_authors() StatusSetter$clone()","code":""},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetter class — StatusSetter","text":"","code":"StatusSetter$new(..., by)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"method-set-corresponding-authors-","dir":"Reference","previous_headings":"","what":"Method set_corresponding_authors()","title":"StatusSetter class — StatusSetter","text":"Set corresponding authors.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetter class — StatusSetter","text":"","code":"StatusSetter$set_corresponding_authors(..., .by, by = deprecated())"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetter class — StatusSetter","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.determine corresponding authors. Matching values case- insensitive. .Variable used set corresponding authors. default, uses authors' id.  Please use .parameter instead.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StatusSetter class — StatusSetter","text":"class instance.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StatusSetter class — StatusSetter","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetter class — StatusSetter","text":"","code":"StatusSetter$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetter.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetter class — StatusSetter","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":null,"dir":"Reference","previous_headings":"","what":"StatusSetterPlume class — StatusSetterPlume","title":"StatusSetterPlume class — StatusSetterPlume","text":"Internal class extending StatusSetter Plume.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"StatusSetterPlume class — StatusSetterPlume","text":"plume::NameHandler -> plume::PlumeHandler -> plume::StatusSetter -> StatusSetterPlume","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"StatusSetterPlume class — StatusSetterPlume","text":"plume::PlumeHandler$get_plume() plume::PlumeHandler$get_roles() plume::PlumeHandler$print() plume::StatusSetter$initialize() plume::StatusSetter$set_corresponding_authors()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StatusSetterPlume class — StatusSetterPlume","text":"StatusSetterPlume$set_main_contributors() StatusSetterPlume$clone()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"method-set-main-contributors-","dir":"Reference","previous_headings":"","what":"Method set_main_contributors()","title":"StatusSetterPlume class — StatusSetterPlume","text":"Force one contributors' names appear first contribution list.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlume class — StatusSetterPlume","text":"","code":"StatusSetterPlume$set_main_contributors(..., .roles = NULL, .by)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlume class — StatusSetterPlume","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.determine main contributors. Expressions can named role set different main contributors different roles , case .roles parameter applies roles already set unnamed expressions. Matching values case-insensitive. .roles Roles assign main contributors . .roles named vector, names used. .Variable used specify authors main contributors. default, uses authors' id.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StatusSetterPlume class — StatusSetterPlume","text":"class instance.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StatusSetterPlume class — StatusSetterPlume","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlume class — StatusSetterPlume","text":"","code":"StatusSetterPlume$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlume.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlume class — StatusSetterPlume","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":null,"dir":"Reference","previous_headings":"","what":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"Internal class extending StatusSetter PlumeQuarto.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"plume::NameHandler -> plume::PlumeHandler -> plume::StatusSetter -> StatusSetterPlumeQuarto","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"plume::PlumeHandler$get_plume() plume::PlumeHandler$get_roles() plume::PlumeHandler$print() plume::StatusSetter$initialize() plume::StatusSetter$set_corresponding_authors()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"StatusSetterPlumeQuarto$set_cofirst_authors() StatusSetterPlumeQuarto$set_equal_contributor() StatusSetterPlumeQuarto$set_deceased() StatusSetterPlumeQuarto$clone()","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"method-set-cofirst-authors-","dir":"Reference","previous_headings":"","what":"Method set_cofirst_authors()","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"Set co-first authors.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"","code":"StatusSetterPlumeQuarto$set_cofirst_authors(..., .by)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.determine co-first authors. Matching values case-insensitive. .Variable used specify authors contributed equally work. default, uses authors' id.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"class instance.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"method-set-equal-contributor-","dir":"Reference","previous_headings":"","what":"Method set_equal_contributor()","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"method deprecated favour set_cofirst_authors().","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"","code":"StatusSetterPlumeQuarto$set_equal_contributor(..., .by, by = deprecated())"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.determine equal contributors. Matching values case-insensitive. .Variable used specify authors equal contributors. default, uses authors' id.  Please use .parameter instead.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"class instance.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"method-set-deceased-","dir":"Reference","previous_headings":"","what":"Method set_deceased()","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"Set deceased authors.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"","code":"StatusSetterPlumeQuarto$set_deceased(..., .by, by = deprecated())"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.determine deceased authors. Matching values case-insensitive. .Variable used specify whether author deceased . default, uses authors' id.  Please use .parameter instead.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"class instance.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"objects class cloneable method.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"","code":"StatusSetterPlumeQuarto$clone(deep = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/StatusSetterPlumeQuarto.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"StatusSetterPlumeQuarto class — StatusSetterPlumeQuarto","text":"deep Whether make deep clone.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/as_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Print vector elements on multiple lines — as_lines","title":"Print vector elements on multiple lines — as_lines","text":"Thin wrapper around cat() display vector elements multiple lines rendering R Markdown Quarto document. primarily intended used Plume's methods output returned element line.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/as_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print vector elements on multiple lines — as_lines","text":"","code":"as_lines(...)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/as_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print vector elements on multiple lines — as_lines","text":"... Objects print.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/as_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print vector elements on multiple lines — as_lines","text":"NULL invisibly.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/as_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print vector elements on multiple lines — as_lines","text":"","code":"aut <- Plume$new(encyclopedists) as_lines(aut$get_affiliations()) #> ^1^Université de Paris #>  #> ^2^Lycée Louis-le-Grand #>  #> ^3^Collège des Quatre-Nations"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/credit_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"CRediT roles — credit_roles","title":"CRediT roles — credit_roles","text":"Helper function returning 14 contributor roles Contributor Roles Taxonomy (CRediT). function default argument roles role_cols parameters plume classes plm_template(), respectively.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/credit_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CRediT roles — credit_roles","text":"","code":"credit_roles(oxford_spelling = TRUE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/credit_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CRediT roles — credit_roles","text":"oxford_spelling suffix -ize/-ization used?","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/credit_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CRediT roles — credit_roles","text":"named vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/credit_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CRediT roles — credit_roles","text":"","code":"credit_roles() #>            conceptualization                data_curation  #>          \"Conceptualization\"              \"Data curation\"  #>                     analysis                      funding  #>            \"Formal analysis\"        \"Funding acquisition\"  #>                investigation                  methodology  #>              \"Investigation\"                \"Methodology\"  #>               administration                    resources  #>     \"Project administration\"                  \"Resources\"  #>                     software                  supervision  #>                   \"Software\"                \"Supervision\"  #>                   validation                visualization  #>                 \"Validation\"              \"Visualization\"  #>                      writing                      editing  #>   \"Writing - original draft\" \"Writing - review & editing\""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/encyclopedists.html","id":null,"dir":"Reference","previous_headings":"","what":"Famous encyclopedists — encyclopedists","title":"Famous encyclopedists — encyclopedists","text":"Data four famous authors Encyclopédie (originally \"Encyclopédie, ou dictionnaire raisonné des sciences, des arts et des métiers\") published France second half 18th century. data set available English (encyclopedists) French (encyclopedists_fr).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/encyclopedists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Famous encyclopedists — encyclopedists","text":"","code":"encyclopedists  encyclopedists_fr"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/encyclopedists.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Famous encyclopedists — encyclopedists","text":"tibble 4 rows 10 variables: given_name,prénom authors' given names family_name,nom authors' family names email,courriel authors' email addresses phone,téléphone authors' phone numbers orcid authors' ORCID affiliation_1,affiliation_2 authors' affiliations supervision authors supervised project writing,rédaction authors involved writing note special notes authors","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/encyclopedists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Famous encyclopedists — encyclopedists","text":"","code":"encyclopedists #> # A tibble: 4 × 10 #>   given_name     family_name        email  phone orcid supervision writing note  #>   <chr>          <chr>              <chr>  <chr> <chr>       <dbl>   <dbl> <chr> #> 1 Denis          Diderot            dider… +1234 0000…           1       1 born… #> 2 Jean-Jacques   Rousseau           rouss… NA    0000…          NA       1 NA    #> 3 François-Marie Arouet             aroue… NA    NA             NA       1 also… #> 4 Jean           Le Rond d'Alembert alemb… NA    0000…           1       1 born… #> # ℹ 2 more variables: affiliation_1 <chr>, affiliation_2 <chr>  encyclopedists_fr #> # A tibble: 4 × 10 #>   prénom         nom        courriel téléphone orcid supervision rédaction note  #>   <chr>          <chr>      <chr>    <chr>     <chr>       <dbl>     <dbl> <chr> #> 1 Denis          Diderot    diderot… +1234     0000…           1         1 né e… #> 2 Jean-Jacques   Rousseau   roussea… NA        0000…          NA         1 NA    #> 3 François-Marie Arouet     arouet@… NA        NA             NA         1 dit … #> 4 Jean           Le Rond d… alember… NA        0000…           1         1 né e… #> # ℹ 2 more variables: affiliation_1 <chr>, affiliation_2 <chr>"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/enumerate.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate vector elements — enumerate","title":"Enumerate vector elements — enumerate","text":"Wrapper around glue_collapse() using sep = \", \" last = \" \" default arguments.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/enumerate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate vector elements — enumerate","text":"","code":"enumerate(x, sep = \", \", last = \" and \")"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/enumerate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate vector elements — enumerate","text":"x character vector. sep Separator used separate terms. last Separator used separate last two items x least 2 items.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/enumerate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate vector elements — enumerate","text":"character string class x.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/enumerate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate vector elements — enumerate","text":"","code":"aut <- Plume$new(encyclopedists) aut$get_author_list() |> enumerate() #> Denis Diderot, Jean-Jacques Rousseau, François-Marie Arouet and Jean Le Rond d'Alembert"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/everyone.html","id":null,"dir":"Reference","previous_headings":"","what":"Select all authors or exclude some from a selection — everyone","title":"Select all authors or exclude some from a selection — everyone","text":"Selection helpers use conjonction status setter methods (.e. methods assign status authors either TRUE FALSE): everyone() select authors. everyone_but()  function deprecated believe necessary since couple authors normally given particular status.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/everyone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select all authors or exclude some from a selection — everyone","text":"","code":"everyone()  everyone_but(...)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/everyone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select all authors or exclude some from a selection — everyone","text":"... One unquoted expressions separated commas. Expressions matching values column defined /.parameters set_*() methods used set given status authors. Matching values case-insensitive.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/everyone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select all authors or exclude some from a selection — everyone","text":"","code":"aut <- Plume$new(encyclopedists)  aut$set_corresponding_authors(everyone()) aut$get_plume() |> dplyr::select(1:3, corresponding) #> # A tibble: 4 × 4 #>      id given_name     family_name        corresponding #>   <int> <chr>          <chr>              <lgl>         #> 1     1 Denis          Diderot            TRUE          #> 2     2 Jean-Jacques   Rousseau           TRUE          #> 3     3 François-Marie Arouet             TRUE          #> 4     4 Jean           Le Rond d'Alembert TRUE"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/orcid.html","id":null,"dir":"Reference","previous_headings":"","what":"ORCID icon — orcid","title":"ORCID icon — orcid","text":"Helper function control size colour ORCID icon.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/orcid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ORCID icon — orcid","text":"","code":"orcid(size = 16, bw = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/orcid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ORCID icon — orcid","text":"size Size (pixels) icon. bw black white version icon used?","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/orcid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ORCID icon — orcid","text":"plume icon.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/orcid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ORCID icon — orcid","text":"","code":"aut <- Plume$new(encyclopedists, orcid_icon = orcid(bw = TRUE))"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plm_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table template for plume classes — plm_template","title":"Create a table template for plume classes — plm_template","text":"helper function allows generate empty tibble can use template supply author data.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plm_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table template for plume classes — plm_template","text":"","code":"plm_template(minimal = TRUE, role_cols = credit_roles(), credit_roles = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plm_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table template for plume classes — plm_template","text":"minimal TRUE, returns empty tibble following columns: given_name, family_name, email, orcid, affiliation note. Otherwise function returns template columns can supplied plume classes PlumeQuarto-specific. role_cols vector names defining role columns create. vector contains key-value pairs, columns named keys. credit_roles  now recommended use role_cols = credit_roles() use Contributor Roles Taxonomy.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plm_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table template for plume classes — plm_template","text":"empty tibble.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plm_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table template for plume classes — plm_template","text":"","code":"plm_template() #> # A tibble: 0 × 21 #> # ℹ 21 variables: given_name <chr>, family_name <chr>, orcid <chr>, #> #   email <chr>, affiliation_1 <chr>, affiliation_2 <chr>, note <chr>, #> #   conceptualization <dbl>, data_curation <dbl>, analysis <dbl>, #> #   funding <dbl>, investigation <dbl>, methodology <dbl>, #> #   administration <dbl>, resources <dbl>, software <dbl>, supervision <dbl>, #> #   validation <dbl>, visualization <dbl>, writing <dbl>, editing <dbl>  plm_template(role_cols = paste0(\"role_\", 1:5)) #> # A tibble: 0 × 12 #> # ℹ 12 variables: given_name <chr>, family_name <chr>, orcid <chr>, #> #   email <chr>, affiliation_1 <chr>, affiliation_2 <chr>, note <chr>, #> #   role_1 <dbl>, role_2 <dbl>, role_3 <dbl>, role_4 <dbl>, role_5 <dbl>"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plume-package.html","id":null,"dir":"Reference","previous_headings":"","what":"plume: A Simple Author Handler for Scientific Writing — plume-package","title":"plume: A Simple Author Handler for Scientific Writing — plume-package","text":"Handles formats author information scientific writing 'R Markdown' 'Quarto'. 'plume' provides easy--use flexible tools injecting author metadata 'YAML' headers well generating author contribution lists (among others) strings tabular data.","code":""},{"path":[]},{"path":"https://arnaudgallou.github.io/plume/dev/reference/plume-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plume: A Simple Author Handler for Scientific Writing — plume-package","text":"Maintainer: Arnaud Gallou arangacas@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/sequential.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the sequencing behaviour of character vectors — sequential","title":"Control the sequencing behaviour of character vectors — sequential","text":"Modifier function used generate logical sequences characters.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/sequential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the sequencing behaviour of character vectors — sequential","text":"","code":"sequential(x)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/sequential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the sequencing behaviour of character vectors — sequential","text":"x character vector.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/sequential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the sequencing behaviour of character vectors — sequential","text":"character vector parent S3 class sequential.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/sequential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the sequencing behaviour of character vectors — sequential","text":"","code":"aut <- Plume$new(   tibble::tibble(     given_name = \"X\",     family_name = \"Y\",     affiliation = 1:60   ),   symbols = list(affiliation = sequential(letters)) )  aut$get_affiliations(sep = \": \", superscript = FALSE) #> a: 1 #> b: 2 #> c: 3 #> d: 4 #> e: 5 #> f: 6 #> g: 7 #> h: 8 #> i: 9 #> j: 10 #> k: 11 #> l: 12 #> m: 13 #> n: 14 #> o: 15 #> p: 16 #> q: 17 #> r: 18 #> s: 19 #> t: 20 #> u: 21 #> v: 22 #> w: 23 #> x: 24 #> y: 25 #> z: 26 #> aa: 27 #> ab: 28 #> ac: 29 #> ad: 30 #> ae: 31 #> af: 32 #> ag: 33 #> ah: 34 #> ai: 35 #> aj: 36 #> ak: 37 #> al: 38 #> am: 39 #> an: 40 #> ao: 41 #> ap: 42 #> aq: 43 #> ar: 44 #> as: 45 #> at: 46 #> au: 47 #> av: 48 #> aw: 49 #> ax: 50 #> ay: 51 #> az: 52 #> ba: 53 #> bb: 54 #> bc: 55 #> bd: 56 #> be: 57 #> bf: 58 #> bg: 59 #> bh: 60"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Set new default names to a plume subclass — set_default_names","title":"Set new default names to a plume subclass — set_default_names","text":"helper function allows set new default names plume subclass, e.g. set default names language English.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set new default names to a plume subclass — set_default_names","text":"","code":"set_default_names(..., .plume_quarto = FALSE)"},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set new default names to a plume subclass — set_default_names","text":"... Key-value pairs keys default names values respective replacements. .plume_quarto setting new names PlumeQuarto?","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set new default names to a plume subclass — set_default_names","text":"named list.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set new default names to a plume subclass — set_default_names","text":"Available names : id, initials, literal_name, corresponding, contributor_rank, given_name, family_name, email, phone, fax, url, affiliation, role, note, orcid. Using .plume_quarto = TRUE adds deceased, equal_contributor, number, dropping_particle acknowledgements.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/reference/set_default_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set new default names to a plume subclass — set_default_names","text":"","code":"# Extending `Plume` with default names in French PlumeFr <- R6::R6Class(   classname = \"PlumeFr\",   inherit = Plume,   private = list(     plume_names = set_default_names(       initials = \"initiales\",       literal_name = \"nom_complet\",       corresponding = \"correspondant\",       given_name = \"prénom\",       family_name = \"nom\",       email = \"courriel\",       phone = \"téléphone\"     )   ) )  PlumeFr$new(encyclopedists_fr) #> # A tibble: 4 × 11 #>      id prénom  nom   nom_complet initiales orcid courriel téléphone role  note  #>   <int> <chr>   <chr> <chr>       <chr>     <chr> <chr>    <chr>     <chr> <chr> #> 1     1 Denis   Dide… Denis Dide… DD        0000… diderot… +1234     Supe… né e… #> 2     2 Jean-J… Rous… Jean-Jacqu… J-JR      0000… roussea… NA        NA    NA    #> 3     3 Franço… Arou… François-M… F-MA      NA    arouet@… NA        NA    dit … #> 4     4 Jean    Le R… Jean Le Ro… JLRd'A    0000… alember… NA        Supe… né e… #> # ℹ 1 more variable: affiliation <list>"},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-development-version","dir":"Changelog","previous_headings":"","what":"plume (development version)","title":"plume (development version)","text":"orcid variable now customisable (#96). New helper as_lines() output elements returned Plume’s methods multiple lines rendering R Markdown Quarto document.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-025","dir":"Changelog","previous_headings":"","what":"plume 0.2.5","title":"plume 0.2.5","text":"CRAN release: 2024-09-02 $get_author_list(suffix =) now slightly flexible try less hard sanitise author list suffixes (#90). PlumeQuarto longer converts roles lower case (#88). PlumeQuarto now supports authors’ degrees group affiliation property (#53). PlumeQuarto now properly handles authors roles (#81). PlumeQuarto now supports .yml .yaml files (#82).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-024","dir":"Changelog","previous_headings":"","what":"plume 0.2.4","title":"plume 0.2.4","text":"CRAN release: 2024-05-10 Tweaked examples vignettes expand Contributions section vignette(\"plume\"). Fixed selection helpers working imported explicitly :: (#76). citation(\"plume\") now generates complete --date citation plume (#75).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-023","dir":"Changelog","previous_headings":"","what":"plume 0.2.3","title":"plume 0.2.3","text":"CRAN release: 2024-01-29 $new(initials_given_name = TRUE) longer makes initials names written script doesn’t use letter cases (#73). Fixed PlumeQuarto’s example longer working withr 3.0.0 due wrong usage local_tempfile() (#70). $get_author_list() now throws informative error corresponding authors set (#69). .roles parameter $set_main_contributors() now propagates roles already set unnamed expression. allows set main contributors across specific roles single call (#65). $to_yaml() now adds affiliations schema least one affiliation (#67). $to_yaml() now adds authors’ id least two authors (#66).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-022","dir":"Changelog","previous_headings":"","what":"plume 0.2.2","title":"plume 0.2.2","text":"CRAN release: 2024-01-09","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"documentation-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"Documentation changes","title":"plume 0.2.2","text":"vignette(\"working---languages\") extended describe overwrite default arguments match preferred language better.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"plume 0.2.2","text":"Clarified error messages suppressing purrr’s wrapper error (#63). $to_yaml() now writes author metadata separate YAML header original YAML header contains strippable meta-information comments, custom tags folded blocks (#56, #61). way $set_*() methods handle ... overhauled consistent results ensure methods work correctly edge cases (#59, #60). $get_contributions() now throws correct error pass wrong argument sep parameter (#55). order $get_affiliations()/$get_notes() parameters switched consistency purposes (#54).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-021","dir":"Changelog","previous_headings":"","what":"plume 0.2.1","title":"plume 0.2.1","text":"CRAN release: 2023-12-09 Fixed $get_contributions() wrongly reordering authors using CRediT roles by_author = TRUE (#50). $get_contributions() gains new parameter sep allows finer control separate contributors roles (#49). $to_yaml() now throws error invalid ORCID identifiers found. Plume’s parameter now working properly (#48). format parameter $get_author_list() now deprecated favour less ambiguous parameter suffix (#47).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-020","dir":"Changelog","previous_headings":"","what":"plume 0.2.0","title":"plume 0.2.0","text":"CRAN release: 2023-11-30","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"plume 0.2.0","text":"Plume gains new method $set_main_contributors() allows force one contributors appear first contribution list given role. new method, Plume’s contructor gained parameter set default /.value used $set_*() methods (#40). New helper credit_roles() returns 14 contributor roles Contributor Roles Taxonomy. now default roles used plume.  plume role handling system overhauled better flexibility ease use (#29). plume classes gain new parameter roles allowing specify roles using named character vector. Rather : can now use following data structure: speficy roles creating plume object: plm_template() gains new parameter role_cols create role columns character vector.","code":"# A tibble: 2 × 4   given_name family_name role_1      role_2   <chr>      <chr>       <chr>       <chr> 1 Zip        Zap         Supervision Writing 2 Ric        Rac         NA          Writing # A tibble: 2 × 4   given_name family_name role_1 role_2   <chr>      <chr>        <dbl>  <dbl> 1 Zip        Zap              1      1 2 Ric        Rac             NA      1 Plume$new(data, roles = c(role_1 = \"Supervision\", role_2 = \"Writing\"))"},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"lifecycle-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Lifecycle changes","title":"plume 0.2.0","text":"$set_equal_contributor() now deprecated favour $set_cofirst_authors() due ambiguous name method (#45). everyone_but() now deprecated function necessary since couple authors normally given particular status (#44). parameter $set_*() methods now deprecated favour .consistency purposes (#41). Defining roles explicitly input data using credit_roles = TRUE now deprecated favour defining role columns roles via parameters role_cols roles, respectively (see details new role handling system ).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"documentation-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation changes","title":"plume 0.2.0","text":"using-credit-roles vignette removed longer needed.","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"plume 0.2.0","text":"Removed stringb dependency favour stringr (#42). Updated encyclopedists encyclopedists_fr data comply new role column system (#39). Column names also homogenised (#46). $to_yaml() now preserves line breaks preceding leading isolated --- (#37). plm_template() now returns role columns numeric type (#26). Initials now drop dots present author names (#31). plume classes now error role column contains multiple roles (#28).","code":""},{"path":"https://arnaudgallou.github.io/plume/dev/news/index.html","id":"plume-010","dir":"Changelog","previous_headings":"","what":"plume 0.1.0","title":"plume 0.1.0","text":"CRAN release: 2023-10-06 First CRAN release.","code":""}]
